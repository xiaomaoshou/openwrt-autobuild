name: X86-64

on:
  workflow_dispatch:
  schedule:
    - cron: 0 15 * * *

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86-64.config
  FEEDS_FILE: feeds/x86-64.txt
  DIY_SCRIPT: diy-script.sh
  FEEDS_DIY: feedsdiy.sh
  FIX_UPNPD: fix_upnpd.sh
  ADD_FEEDS: add_feeds.sh
  SET_DHCP: set_dhcp.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86-64
  DOCKER_REPO: jessekool/immortalwrt_multiple_ethports  # Docker 仓库名称
  DOCKER_TAG: latest                                    # Docker 镜像标签
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
    - name: Check Server Performance(检查服务器性能)
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment(初始化环境)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
        libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
        libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
        python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
        uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"
        
    - name: Install LLVM/clang 12
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-12 llvm-12
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-12 100
        
    - name: Combine Disks(合并磁盘)
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone Source Code(克隆源代码)
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        git clone https://github.com/kob/nf_deaf-openwrt.git package/kernel/nf_deaf
        ls package/kernel/nf_deaf -lh

    - name: Generate Variables(生成变量)
      run: |
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cp $FEEDS_FILE $OPENWRT_PATH/feeds.conf.default
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    - name: Cache Toolchain(缓存工具链)
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: false
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}
    
    - name: Install Feeds&Fix Bugs&Apply Custom Settings(安装feeds&修复问题&应用自定义设置)
      run: |
        [ -e files ] && mv files $OPENWRT_PATH/files       
        chmod +x $DIY_SCRIPT
        chmod +x $FEEDS_DIY
        chmod +x $ADD_FEEDS
        chmod +x $FIX_UPNPD
        bash $GITHUB_WORKSPACE/$ADD_FEEDS
        bash $GITHUB_WORKSPACE/$SET_DHCP
        cd $OPENWRT_PATH
        bash $GITHUB_WORKSPACE/$DIY_SCRIPT
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        bash $GITHUB_WORKSPACE/$FEEDS_DIY
        bash $GITHUB_WORKSPACE/$FIX_UPNPD

    - name: Load Custom Configuration(加载自定义配置)
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config

    - name: Download DL Package(下载DL软件包)
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Set LLVM/clang Environment Variables
      run: |
        echo "CC=clang-12" >> $GITHUB_ENV
        echo "CXX=clang++-12" >> $GITHUB_ENV

    - name: Compile Firmware(开始编译固件)
      id: compile
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    - name: Check Space Usage(检查空间使用情况)
      if: (!cancelled())
      run: df -hT

    - name: Upload Bin Directory(上传固件)
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin

    - name: Organize Files(整理文件)
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        cat sha256sums
        cp $OPENWRT_PATH/.config build.config
        mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk packages
        tar -zcf Packages.tar.gz packages
        rm -rf packages feeds.buildinfo version.buildinfo
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        
    - name: Prepare Docker build context
      run: |
        mkdir -p docker/openwrt
        FIRMWARE_PATH=$(find $OPENWRT_PATH/bin/targets -name "immortalwrt-x86-64-generic-rootfs.tar.gz" | head -n 1)
        if [ -z "$FIRMWARE_PATH" ]; then
          echo "Error: Firmware file not found!"
          exit 1
        fi
        cp "$FIRMWARE_PATH" docker/openwrt/
        echo "FROM scratch" > docker/openwrt/Dockerfile
        echo "ADD $(basename "$FIRMWARE_PATH") /" >> docker/openwrt/Dockerfile
        
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push Docker image
      run: |
        cd docker/openwrt
        docker build -t ${{ env.DOCKER_REPO }}:${{ env.FILE_DATE }} .
        docker push ${{ env.DOCKER_REPO }}:${{ env.FILE_DATE }}
        docker tag ${{ env.DOCKER_REPO }}:${{ env.FILE_DATE }} ${{ env.DOCKER_REPO }}:latest
        docker push ${{ env.DOCKER_REPO }}:latest

    - name: Upload Firmware To Artifact(将固件上传到Artifact)
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}

    - name: Upload Firmware To Release(发布固件)
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
          ### 📒 固件信息(X86-64)
          - 这是immortalwrt-x86-64(6.6kernel) for docker
          - 💻 这是 ${{ env.FIRMWARE_TAG }} 平台使用的 immortalwrt 固件
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🌐 默认地址: 192.168.6.1
          - 🔑 默认密码: password
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.VERSION_INFO }}
          - 固件同步推送至docker_hub仓库jessekool/immortalwrt_multiple_ethports
          - docker用的带常用软件包的immortalwrt固件
          - 使用方式请参考恩山帖子https://www.right.com.cn/forum/thread-8413705-1-1.html
